{"version":3,"sources":["HourRange.jsx","graph.js","App.jsx","serviceWorker.js","index.js"],"names":["Handle","Slider","handle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","key","HourRange","updateHour","state","currentHour","handleSliderUpdate","bind","val","this","setState","style","paddingTop","min","max","dots","onAfterChange","React","Component","connection","axios","create","baseURL","timeout","getBranches","hour","getNodes","buildGraph","a","nodes","elements","edges","data","forEach","branch","arrows","flow","push","from","node_from","to","node_to","Math","abs","title","toFixed","console","error","node","color","generation","demand","cost","id","node_id","label","toString","options","layout","hierarchical","randomSeed","physics","shape","App","graph","then","network","setData","height","width","background","getNetwork","Boolean","window","location","hostname","match","ReactDOM","render","className","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.50f9bbd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport Tooltip from 'rc-tooltip';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport 'rc-tooltip/assets/bootstrap.css';\r\n\r\nconst Handle = Slider.Handle;\r\n\r\nconst handle = (props) => {\r\n    const { value, dragging, index, ...restProps } = props;\r\n    return (\r\n        <Tooltip\r\n            prefixCls=\"rc-slider-tooltip\"\r\n            overlay={value}\r\n            visible={dragging}\r\n            placement=\"top\"\r\n            key={index}\r\n        >\r\n            <Handle value={value} {...restProps} />\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nclass HourRange extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateHour = props.updateHour;\r\n        this.state = { currentHour: 1 };\r\n        this.handleSliderUpdate = this.handleSliderUpdate.bind(this);\r\n    }\r\n    handleSliderUpdate(val) {\r\n        if (val !== this.state.currentHour) {\r\n            this.setState({ currentHour: val });\r\n            this.updateHour(val);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div style={{ paddingTop: \"20px\" }}><h4>Choose an hour:</h4>\r\n            <Slider handle={handle} min={1} max={24} dots={true} onAfterChange={this.handleSliderUpdate} />\r\n            <p>Current hour: {this.state.currentHour}</p>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default HourRange;\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst connection = axios.create({\r\n    baseURL: 'http://127.0.0.1:3000/',\r\n    timeout: 1000\r\n});\r\n\r\nfunction getBranches(hour) {\r\n    return connection('branches/' + hour);\r\n}\r\n\r\nfunction getNodes(hour) {\r\n    return connection('nodes/' + hour);\r\n}\r\n\r\nexport async function buildGraph(hour) {\r\n    let nodes = getNodes(hour);\r\n    let elements = {\r\n        nodes: [],\r\n        edges: []\r\n    }\r\n\r\n    try {\r\n        const response = await getBranches(hour);\r\n        response.data.forEach(function (branch) {\r\n            let arrows;\r\n            if (branch.flow > 0) {\r\n                arrows = \"to\";\r\n            } else {\r\n                arrows = \"from\";\r\n            }\r\n            elements.edges.push({\r\n                from: branch.node_from,\r\n                to: branch.node_to,\r\n                value: Math.abs(branch.flow),\r\n                title: \"Flow \" + Math.abs(branch.flow).toFixed(3) + \" MW\",\r\n                arrows: arrows,\r\n\r\n            })\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    try {\r\n        const response = await nodes;\r\n        response.data.forEach(function (node) {\r\n            let color, value, title;\r\n            if (node.generation) {\r\n                if (node.demand > 0) {\r\n                    color = \"#fcc419\";\r\n                    value = Math.abs(node.generation - node.demand);\r\n                    title = \"Demand: \" + Math.abs(node.demand).toFixed(3) + \" MW  Generation: \" + node.generation.toFixed(3) + \" MW  Cost: \" + node.cost.toFixed(2) + \" zł\";\r\n                } else {\r\n                    color = \"#51cf66\";\r\n                    value = node.generation;\r\n                    title = \"Generation: \" + node.generation.toFixed(3) + \" MW  Cost: \" + node.cost.toFixed(2) + \" zł\";\r\n                }\r\n            } else {\r\n                color = \"#ff6b6b\";\r\n                value = Math.abs(node.demand);\r\n                title = \"Demand: \" + value.toFixed(3) + \" MW\";\r\n                if (node.demand == 0) {\r\n                    color = \"#e7f5ff\";\r\n                }\r\n            }\r\n            elements.nodes.push({\r\n                id: node.node_id,\r\n                label: node.node_id.toString(),\r\n                color: color,\r\n                value: value,\r\n                title: title\r\n            })\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    return elements;\r\n}","import React from 'react';\nimport Graph from \"react-graph-vis\";\nimport HourRange from './HourRange.jsx';\nimport { buildGraph } from './graph';\nimport 'vis-network/dist/vis-network.min.css';\n\n\nconst options = {\n  layout: {\n    hierarchical: false,\n    randomSeed: 10\n  },\n  physics: false,\n  nodes: {\n    shape: 'dot',\n  }\n\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentHour: 1,\n      graph: {\n        nodes: [],\n        edges: []\n      }\n    }\n    this.updateHour = this.updateHour.bind(this);\n\n  }\n  componentDidMount() {\n    buildGraph(this.state.currentHour).then((elements) => this.network.setData(elements));\n  }\n  updateHour(val) {\n    this.setState({ currentHour: val });\n    buildGraph(this.state.currentHour).then((elements) => this.network.setData(elements));\n  }\n  render() {\n    return (<div><Graph graph={{ nodes: [], edges: [] }} options={options} style={{ height: \"700px\", width: '100%', background: '#eee' }} getNetwork={network => {\n      this.network = network\n    }} /><HourRange updateHour={this.updateHour} /></div>);\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './milligram.min.css';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <section className=\"container\">\n    <h2>Power graph</h2>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </section >,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}